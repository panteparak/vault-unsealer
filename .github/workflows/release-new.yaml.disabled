# New Release Pipeline - Streamlined release automation using composite actions
# Uses: setup, build-image, security-scan composite actions for comprehensive releases
# Estimated Duration: 12-18 minutes

name: üöÄ Release (New)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      skip_security:
        description: 'Skip security scanning'
        required: false
        default: false
        type: boolean
      build_platforms:
        description: 'Build platforms'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: "1.24"

# Required permissions for reusable workflows
permissions:
  actions: read
  contents: write
  security-events: write
  packages: write
  pull-requests: write

# Only run one release at a time
concurrency:
  group: release-new
  cancel-in-progress: false

jobs:
  # Setup and version validation
  setup:
    name: üè∑Ô∏è Release Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      go-version: ${{ steps.setup-env.outputs.go-version }}
      config-hash: ${{ steps.setup-env.outputs.config-hash }}
      vault-version: ${{ steps.setup-env.outputs.vault-version }}
      k3s-version: ${{ steps.setup-env.outputs.k3s-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        id: setup-env
        uses: ./.github/actions/setup
        with:
          go-version: "1.24"
          setup-docker: true
          cache-prefix: release

  # Version determination and validation
  validate-release:
    name: ‚úÖ Validate Release
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine and validate version
        id: version
        run: |
          echo "üè∑Ô∏è Determining release version..."

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.ref_name }}"
            # Auto-detect prerelease (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z or vX.Y.Z-prerelease"
            exit 1
          fi

          # Check if tag already exists
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "‚ö†Ô∏è Tag $VERSION already exists"
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "‚ùå Cannot create release for existing tag"
              exit 1
            fi
          fi

          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          echo "‚úÖ Release validation:"
          echo "  Version: $VERSION"
          echo "  Prerelease: $IS_PRERELEASE"
          echo "  Event: ${{ github.event_name }}"

      - name: Generate changelog
        id: changelog
        run: |
          echo "üìã Generating changelog..."

          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## üîÑ Changes since $PREVIOUS_TAG" > changelog.md
            echo "" >> changelog.md

            # Categorize commits
            echo "### ‚ú® New Features" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="^feat" >> changelog.md || true
            echo "" >> changelog.md

            echo "### üêõ Bug Fixes" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="^fix" >> changelog.md || true
            echo "" >> changelog.md

            echo "### üìö Documentation" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="^docs" >> changelog.md || true
            echo "" >> changelog.md

            echo "### üîß Other Changes" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD \
              --grep="^feat" --grep="^fix" --grep="^docs" --invert-grep >> changelog.md || true
          else
            echo "## üéâ Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "- Initial release of vault-autounseal-operator" >> changelog.md
            echo "- Kubernetes operator for automatic Vault unsealing" >> changelog.md
            echo "- Multi-vault support with configurable strategies" >> changelog.md
          fi

          # Output for GitHub Actions
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          echo "‚úÖ Changelog generated"

  # Pre-release security scan
  security-scan:
    name: üîí Pre-Release Security
    runs-on: ubuntu-latest
    needs: [setup, validate-release]
    if: github.event.inputs.skip_security != 'true'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run pre-release security scan
        uses: ./.github/actions/security-scan
        with:
          scan-type: all
          severity-threshold: MEDIUM
          fail-on-severity: CRITICAL
          upload-sarif: true
          go-version: ${{ needs.setup.outputs.go-version }}

  # Build release images
  build-release:
    name: üèóÔ∏è Build Release Images
    runs-on: ubuntu-latest
    needs: [setup, validate-release, security-scan]
    if: always() && needs.validate-release.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    timeout-minutes: 25
    outputs:
      image-tags: ${{ steps.build.outputs.image-tags }}
      image-digest: ${{ steps.build.outputs.image-digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build release Docker images
        id: build
        uses: ./.github/actions/build-image
        with:
          registry: ghcr.io
          image-name: ${{ github.repository }}
          platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
          push: true
          go-version: ${{ needs.setup.outputs.go-version }}
          build-args: '["BUILD_VERSION=${{ needs.validate-release.outputs.version }}", "RELEASE_BUILD=true", "BUILD_DATE=${{ github.run_number }}"]'

  # Release validation tests
  release-validation:
    name: ‚úÖ Release Validation
    runs-on: ubuntu-latest
    needs: [setup, build-release, validate-release]
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run release validation tests
        uses: ./.github/actions/run-integration-tests
        with:
          coverage: false
          timeout: 15m
          test-tags: "release,smoke"
          go-version: ${{ needs.setup.outputs.go-version }}
          vault-version: ${{ needs.setup.outputs.vault-version }}

  # Helm chart packaging and release
  helm-release:
    name: üì¶ Helm Chart Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    outputs:
      chart-version: ${{ steps.package.outputs.version }}
      chart-digest: ${{ steps.package.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Update chart metadata
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "üì¶ Updating Helm chart to version $VERSION..."

          # Update Chart.yaml
          sed -i "s/^version: .*/version: $VERSION/" ./helm/vault-autounseal-operator/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"$VERSION\"/" ./helm/vault-autounseal-operator/Chart.yaml

          # Update values.yaml with release image
          IMAGE_TAG=$(echo "${{ needs.build-release.outputs.image-tags }}" | head -n1)
          REPOSITORY=$(echo "$IMAGE_TAG" | cut -d':' -f1)
          TAG=$(echo "$IMAGE_TAG" | cut -d':' -f2)

          sed -i "s|repository: .*|repository: $REPOSITORY|" ./helm/vault-autounseal-operator/values.yaml
          sed -i "s/tag: .*/tag: \"$TAG\"/" ./helm/vault-autounseal-operator/values.yaml

          echo "‚úÖ Chart metadata updated"

      - name: Package Helm chart
        id: package
        run: |
          echo "üì¶ Packaging Helm chart..."

          # Update dependencies
          helm dependency update ./helm/vault-autounseal-operator

          # Package chart
          helm package ./helm/vault-autounseal-operator \
            --destination=./charts/ \
            --version=${{ needs.validate-release.outputs.version }}

          # Generate chart digest
          CHART_FILE="charts/vault-autounseal-operator-${{ needs.validate-release.outputs.version }}.tgz"
          CHART_DIGEST=$(sha256sum "$CHART_FILE" | cut -d' ' -f1)

          echo "version=${{ needs.validate-release.outputs.version }}" >> $GITHUB_OUTPUT
          echo "digest=$CHART_DIGEST" >> $GITHUB_OUTPUT

          echo "‚úÖ Chart packaged: $CHART_FILE"
          echo "‚úÖ Chart digest: $CHART_DIGEST"

      - name: Validate packaged chart
        run: |
          echo "üîç Validating packaged chart..."

          CHART_FILE="charts/vault-autounseal-operator-${{ needs.validate-release.outputs.version }}.tgz"

          # Test chart installation
          helm template test-release "$CHART_FILE" \
            --namespace vault-operator-system \
            --create-namespace > /tmp/chart-test.yaml

          # Basic validation of generated manifests
          if grep -q "kind: Deployment" /tmp/chart-test.yaml && \
             grep -q "kind: ServiceAccount" /tmp/chart-test.yaml && \
             grep -q "kind: ClusterRole" /tmp/chart-test.yaml; then
            echo "‚úÖ Chart validation passed"
          else
            echo "‚ùå Chart validation failed - missing expected resources"
            exit 1
          fi

      - name: Upload Helm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-release-${{ needs.validate-release.outputs.version }}
          path: charts/
          retention-days: 365

  # GitHub release creation
  github-release:
    name: üìù GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, helm-release, release-validation]
    if: always() && needs.validate-release.result == 'success' && needs.build-release.result == 'success' && needs.helm-release.result == 'success'
    outputs:
      release-url: ${{ steps.release.outputs.html_url }}
      upload-url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          name: helm-release-${{ needs.validate-release.outputs.version }}
          path: ./release-artifacts/

      - name: Create comprehensive release notes
        run: |
          cat > release-notes.md << 'EOF'
          # üöÄ Release ${{ needs.validate-release.outputs.tag }}

          ## üìã What's New

          ${{ needs.validate-release.outputs.changelog }}

          ## üì¶ Installation Methods

          ### Helm Chart (Recommended)
          ```bash
          # Add the repository
          helm repo add vault-autounseal-operator https://panteparak.github.io/vault-autounseal-operator
          helm repo update

          # Install the operator
          helm install vault-operator vault-autounseal-operator/vault-autounseal-operator \
            --version ${{ needs.validate-release.outputs.version }} \
            --namespace vault-operator-system \
            --create-namespace
          ```

          ### Docker Image
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          ```

          ### Kubernetes Manifest (Direct)
          ```bash
          kubectl apply -f https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-release.outputs.tag }}/install.yaml
          ```

          ## üîç Verification

          **Image Details:**
          - **Registry**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}`
          - **Version**: `${{ needs.validate-release.outputs.version }}`
          - **Digest**: `${{ needs.build-release.outputs.image-digest }}`
          - **Platforms**: ${{ github.event.inputs.build_platforms || 'linux/amd64, linux/arm64' }}

          **Helm Chart:**
          - **Version**: `${{ needs.helm-release.outputs.chart-version }}`
          - **Digest**: `${{ needs.helm-release.outputs.chart-digest }}`

          ## üìã Compatibility Matrix

          | Component | Version | Status |
          |-----------|---------|--------|
          | Kubernetes | 1.28+ | ‚úÖ Supported |
          | Helm | 3.8+ | ‚úÖ Supported |
          | Vault | 1.12.0+ | ‚úÖ Tested |
          | Go | ${{ env.GO_VERSION }} | ‚úÖ Built with |

          ## üîê Security

          This release has been scanned for vulnerabilities:
          EOF

          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "- ‚úÖ **Security Scan**: Passed" >> release-notes.md
            echo "- **Vulnerabilities**: ${{ needs.security-scan.outputs.vulnerabilities-found || '0' }} found" >> release-notes.md
            echo "- **Critical**: ${{ needs.security-scan.outputs.critical-count || '0' }}" >> release-notes.md
            echo "- **High**: ${{ needs.security-scan.outputs.high-count || '0' }}" >> release-notes.md
          else
            echo "- ‚ö†Ô∏è **Security Scan**: Skipped" >> release-notes.md
          fi

          cat >> release-notes.md << 'EOF'

          ## üîÑ Upgrade Instructions

          ### From Previous Versions
          ```bash
          # Helm upgrade
          helm upgrade vault-operator vault-autounseal-operator/vault-autounseal-operator \
            --version ${{ needs.validate-release.outputs.version }} \
            --namespace vault-operator-system
          ```

          ### Breaking Changes
          EOF

          if [[ "${{ needs.validate-release.outputs.is_prerelease }}" == "true" ]]; then
            echo "‚ö†Ô∏è **This is a pre-release version** - Use with caution in production." >> release-notes.md
          else
            echo "‚úÖ **Stable Release** - Production ready." >> release-notes.md
          fi

      - name: Create GitHub release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: Release ${{ needs.validate-release.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            ./release-artifacts/*.tgz
          make_latest: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  # Post-release verification and notification
  post-release:
    name: üéâ Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, github-release]
    if: always() && needs.github-release.result == 'success'
    steps:
      - name: Verify release artifacts
        run: |
          echo "üîç Verifying release artifacts..."

          # Verify Docker image exists and works
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}"

          echo "Pulling image: $IMAGE_TAG"
          docker pull "$IMAGE_TAG"

          # Basic image verification
          docker inspect "$IMAGE_TAG" > image-info.json

          # Test image can run
          if docker run --rm --entrypoint="" "$IMAGE_TAG" /manager --version 2>/dev/null; then
            echo "‚úÖ Image verification passed"
          else
            echo "‚ö†Ô∏è Image runs but version check failed (may be expected)"
          fi

          # Verify image platforms
          docker manifest inspect "$IMAGE_TAG" | jq '.manifests[].platform' || true

      - name: Update documentation
        run: |
          echo "üìö Documentation update recommendations:"
          echo "- Update README.md with new version"
          echo "- Update Helm chart documentation"
          echo "- Update compatibility matrix"
          echo "- Update installation examples"

      - name: Generate release metrics
        run: |
          echo "üìä Release metrics:"
          echo "- Release Type: ${{ needs.validate-release.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable' }}"
          echo "- Build Duration: ~12-18 minutes"
          echo "- Platforms: ${{ github.event.inputs.build_platforms || '2 (amd64, arm64)' }}"
          echo "- Security Scanned: ${{ needs.security-scan.result != 'skipped' && 'Yes' || 'No' }}"
          echo "- Validation Tests: ${{ needs.release-validation.result == 'success' && 'Passed' || 'Skipped/Failed' }}"

      - name: Create success summary
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Release ${{ needs.validate-release.outputs.tag }} completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ needs.validate-release.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Helm Chart**: \`vault-autounseal-operator-${{ needs.validate-release.outputs.version }}.tgz\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: ${{ needs.github-release.outputs.release-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîÑ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Announce release to stakeholders" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Update deployment environments" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor deployment metrics" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Update documentation if needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result != 'skipped' && '‚úÖ Completed' || '‚è≠Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation Tests**: ${{ needs.release-validation.result == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Check required' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-Platform Build**: ‚úÖ Completed" >> $GITHUB_STEP_SUMMARY

      - name: Notify external systems
        run: |
          echo "üì¢ External notification hooks would go here:"
          echo "- Slack notification"
          echo "- Email notification"
          echo "- Webhook to deployment systems"
          echo "- Update monitoring dashboards"
          # This is where you would add actual notification logic
