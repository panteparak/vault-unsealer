name: 'Build Docker Image'
description: 'Build and push Docker images with multi-platform support'

inputs:
  registry:
    description: 'Container registry'
    required: false
    default: 'ghcr.io'
  image-name:
    description: 'Image name'
    required: true
  platforms:
    description: 'Target platforms'
    required: false
    default: 'linux/amd64,linux/arm64'
  push:
    description: 'Push images to registry'
    required: false
    default: 'true'
  go-version:
    description: 'Go version for build args'
    required: false
    default: '1.24'
  build-args:
    description: 'Additional build arguments (JSON array)'
    required: false
    default: '[]'

outputs:
  image-tags:
    description: 'Built image tags'
    value: ${{ steps.meta.outputs.tags }}
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Log in to Container Registry
      if: inputs.push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Prepare build arguments
      id: build-args
      shell: bash
      run: |
        echo "üîß Preparing build arguments..."

        # Default build args
        BUILD_ARGS="GO_VERSION=${{ inputs.go-version }}"
        BUILD_ARGS="$BUILD_ARGS,BUILD_VERSION=${{ github.sha }}"
        BUILD_ARGS="$BUILD_ARGS,BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        BUILD_ARGS="$BUILD_ARGS,VCS_REF=${{ github.sha }}"
        BUILD_ARGS="$BUILD_ARGS,VERSION=${{ github.ref_name }}"

        # Parse additional build args from input (if provided)
        if [[ "${{ inputs.build-args }}" != "[]" ]]; then
          ADDITIONAL_ARGS=$(echo '${{ inputs.build-args }}' | jq -r '.[]' | tr '\n' ',' | sed 's/,$//')
          if [[ -n "$ADDITIONAL_ARGS" ]]; then
            BUILD_ARGS="$BUILD_ARGS,$ADDITIONAL_ARGS"
          fi
        fi

        echo "build-args=$BUILD_ARGS" >> $GITHUB_OUTPUT
        echo "‚úÖ Build arguments prepared: $BUILD_ARGS"

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: ${{ steps.build-args.outputs.build-args }}

    - name: Generate build summary
      shell: bash
      run: |
        echo "## üèóÔ∏è Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry**: ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: ${{ inputs.image-name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms**: ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
        echo "**Push**: ${{ inputs.push }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üè∑Ô∏è Tags" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Test built image (if pushed)
      if: inputs.push == 'true'
      shell: bash
      run: |
        echo "üß™ Testing built image..."

        # Extract first tag for testing
        FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

        # Pull and test the image
        docker pull "$FIRST_TAG"

        # Basic image inspection
        docker inspect "$FIRST_TAG" > image-inspect.json

        # Test image can run (basic smoke test)
        if docker run --rm --entrypoint="" "$FIRST_TAG" which vault-unsealer >/dev/null 2>&1; then
          echo "‚úÖ Image smoke test passed"
        else
          echo "‚ö†Ô∏è Image smoke test failed - binary not found"
          exit 1
        fi

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          image-inspect.json
          build-*.log
        retention-days: 7
