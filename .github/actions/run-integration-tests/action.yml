name: 'Run Integration Tests'
description: 'Run Go integration tests with TestContainers'

inputs:
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.24'
  coverage:
    description: 'Enable coverage reporting'
    required: false
    default: 'false'
  race-detection:
    description: 'Enable race detection'
    required: false
    default: 'true'
  timeout:
    description: 'Test timeout'
    required: false
    default: '15m'
  parallel:
    description: 'Number of parallel test processes'
    required: false
    default: '4'
  test-tags:
    description: 'Additional build tags for tests'
    required: false
    default: ''
  vault-version:
    description: 'Vault version for integration tests'
    required: false
    default: ''
  k3s-version:
    description: 'K3s version for integration tests'
    required: false
    default: ''

outputs:
  result:
    description: 'Test result (success/failure)'
    value: ${{ steps.test-result.outputs.result }}
  coverage:
    description: 'Coverage percentage'
    value: ${{ steps.coverage.outputs.percentage }}

runs:
  using: 'composite'
  steps:
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        cache: true

    - name: Create test directories
      shell: bash
      run: |
        mkdir -p coverage reports artifacts
        echo "📁 Test directories created"

    - name: Setup integration test dependencies
      shell: bash
      run: |
        echo "🔧 Setting up integration test dependencies..."

        # Load versions from config or use provided values
        if [[ -n "${{ inputs.vault-version }}" ]]; then
          VAULT_VERSION="${{ inputs.vault-version }}"
        else
          VAULT_VERSION=$(grep -A5 "vault:" tests/config/versions.yaml | grep "default:" | cut -d'"' -f2 2>/dev/null || echo "1.19.0")
        fi

        if [[ -n "${{ inputs.k3s-version }}" ]]; then
          K3S_VERSION="${{ inputs.k3s-version }}"
        else
          K3S_VERSION=$(grep -A5 "k3s:" tests/config/versions.yaml | grep "default:" | cut -d'"' -f2 2>/dev/null || echo "v1.30.8-k3s1")
        fi

        echo "VAULT_VERSION=$VAULT_VERSION" >> $GITHUB_ENV
        echo "K3S_VERSION=$K3S_VERSION" >> $GITHUB_ENV

        echo "✅ Integration test versions:"
        echo "  Vault: $VAULT_VERSION"
        echo "  K3s: $K3S_VERSION"

    - name: Determine test packages and tags
      id: config
      shell: bash
      run: |
        echo "🔍 Configuring integration tests..."

        PACKAGES="./integration/..."
        BASE_TAGS="integration"

        # Add custom tags if provided
        if [[ -n "${{ inputs.test-tags }}" ]]; then
          TAGS="$BASE_TAGS,${{ inputs.test-tags }}"
        else
          TAGS="$BASE_TAGS"
        fi

        echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
        echo "tags=$TAGS" >> $GITHUB_OUTPUT

        echo "✅ Integration test configuration:"
        echo "  Packages: $PACKAGES"
        echo "  Tags: $TAGS"
        echo "  Working Dir: tests"

    - name: Run integration tests
      id: run-tests
      shell: bash
      run: |
        echo "🔗 Running integration tests using make..."

        # Set environment variables for make command
        export TEST_TIMEOUT="${{ inputs.timeout }}"
        export PARALLELISM="${{ inputs.parallel }}"
        export VERBOSE="true"
        export CI="true"
        export VAULT_VERSION="${{ env.VAULT_VERSION }}"
        export K3S_VERSION="${{ env.K3S_VERSION }}"

        # Set test scenario if provided in tags
        if [[ "${{ inputs.test-tags }}" == *"basic"* ]]; then
          export TEST_SCENARIO="basic"
        elif [[ "${{ inputs.test-tags }}" == *"stress"* ]]; then
          export TEST_SCENARIO="stress"
        elif [[ "${{ inputs.test-tags }}" == *"chaos"* ]]; then
          export TEST_SCENARIO="chaos"
        fi

        # Run tests using make command for consistency
        if make test-integration 2>&1 | tee "reports/integration-test-output.log"; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "✅ Integration tests completed successfully"
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "❌ Integration tests failed"
          exit 1
        fi

    - name: Generate test summary
      id: summary
      if: always()
      shell: bash
      run: |
        echo "📊 Generating integration test summary..."

        # Parse test results
        TOTAL_TESTS=$(grep -c "^=== RUN" reports/integration-test-output.log 2>/dev/null || echo "0")
        PASSED_TESTS=$(grep -c "--- PASS:" reports/integration-test-output.log 2>/dev/null || echo "0")
        FAILED_TESTS=$(grep -c "--- FAIL:" reports/integration-test-output.log 2>/dev/null || echo "0")
        SKIPPED_TESTS=$(grep -c "--- SKIP:" reports/integration-test-output.log 2>/dev/null || echo "0")

        # Generate summary
        SUMMARY="## 🔧 Integration Test Results\\n\\n"
        SUMMARY="${SUMMARY}| Metric | Count |\\n"
        SUMMARY="${SUMMARY}|--------|-------|\\n"
        SUMMARY="${SUMMARY}| Total | $TOTAL_TESTS |\\n"
        SUMMARY="${SUMMARY}| Passed | $PASSED_TESTS |\\n"
        SUMMARY="${SUMMARY}| Failed | $FAILED_TESTS |\\n"
        SUMMARY="${SUMMARY}| Skipped | $SKIPPED_TESTS |\\n"

        echo "report<<EOF" >> $GITHUB_OUTPUT
        echo -e "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Add to step summary
        echo -e "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    - name: Process coverage
      id: coverage
      if: inputs.coverage == 'true' && always()
      shell: bash
      run: |
        if [[ -f "coverage/integration-coverage.out" ]]; then
          echo "📈 Processing integration coverage data..."

          # Generate coverage report
          go tool cover -html=coverage/integration-coverage.out -o coverage/integration-coverage.html
          go tool cover -func=coverage/integration-coverage.out > coverage/integration-coverage.txt

          # Extract coverage percentage
          COVERAGE=$(go tool cover -func=coverage/integration-coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT

          echo "✅ Integration Coverage: $COVERAGE%"

          # Add coverage to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Integration Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No integration coverage data found"
          echo "percentage=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ github.run_number }}
        path: |
          coverage/
          reports/
          artifacts/
          *.log
        retention-days: 14

    - name: Clean up test environment
      if: always()
      shell: bash
      run: |
        echo "🧹 Cleaning up integration test environment..."

        # Clean up any remaining containers
        docker system prune -f --volumes --filter "label=org.testcontainers.sessionId" 2>/dev/null || true

        echo "✅ Integration test environment cleaned up"

    - name: Set test result
      id: test-result
      if: always()
      shell: bash
      run: |
        if [[ "${{ steps.run-tests.outputs.result }}" == "success" ]]; then
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
        fi
