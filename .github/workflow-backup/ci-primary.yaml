# Primary CI/CD Pipeline - Fast feedback for all PRs and main branch pushes
# Consolidates: basic linting, unit tests, build, and smoke tests
# Estimated Duration: 15-20 minutes

name: 🚀 Primary CI/CD

on:
  push:
    branches: [ main, develop, 'feat/*', 'fix/*', 'chore/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: "1.24"  # Standardized across all workflows

# Prevent multiple runs on same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code quality and linting
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          timeout: 5m
          args: --timeout=5m --config=.golangci.yml

  # Unit tests with coverage
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Create test directories
        run: mkdir -p coverage reports

      - name: Run unit tests
        run: |
          go test -v -race -timeout=5m -coverprofile=coverage/coverage.out \
            -covermode=atomic ./pkg/... ./cmd/... -tags=unit \
            | tee reports/unit-tests.log

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html
          go tool cover -func=coverage/coverage.out | tee coverage/coverage.txt

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage.out
          flags: unittests
          name: unit-test-coverage
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            reports/
          retention-days: 7

  # Multi-platform Docker build
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    timeout-minutes: 15
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            BUILD_VERSION=${{ github.sha }}

  # Helm chart packaging
  helm-package:
    name: 📦 Helm Chart
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Lint Helm chart
        run: |
          helm dependency update ./helm/vault-unsealer
          helm lint ./helm/vault-unsealer

      - name: Package Helm chart
        run: |
          helm package ./helm/vault-unsealer \
            --version=0.0.0-${{ github.sha }} \
            --app-version=${{ github.sha }} \
            --destination=./charts/

      - name: Upload Helm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: charts/
          retention-days: 7

  # Basic smoke tests using our new configuration system
  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 10
    services:
      vault:
        image: hashicorp/vault:1.19.0
        env:
          VAULT_DEV_ROOT_TOKEN_ID: myroot
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        ports:
          - 8200:8200
        options: --cap-add=IPC_LOCK
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Wait for Vault
        run: |
          timeout 30s bash -c 'until curl -sf http://localhost:8200/v1/sys/health; do sleep 1; done'

      - name: Run basic connectivity tests
        run: |
          go test -v -timeout=5m ./tests/unit/vault -tags=smoke \
            -test.run=TestBasicConnectivity
        env:
          VAULT_ADDR: http://localhost:8200
          VAULT_TOKEN: myroot

  # Status check job for branch protection
  ci-status:
    name: ✅ CI Status Check
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, build, helm-package, smoke-tests]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          # Check if any required job failed
          if [[ "${{ needs.lint.result }}" == "failure" ||
                "${{ needs.unit-tests.result }}" == "failure" ||
                "${{ needs.build.result }}" == "failure" ||
                "${{ needs.helm-package.result }}" == "failure" ||
                "${{ needs.smoke-tests.result }}" == "failure" ]]; then
            echo "❌ One or more required jobs failed"
            exit 1
          fi
          echo "✅ All required jobs passed"

      - name: Summary
        run: |
          echo "## 🚀 Primary CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Code Quality | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Package | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Helm Chart | ${{ needs.helm-package.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.smoke-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Duration**: Approximately 15-20 minutes" >> $GITHUB_STEP_SUMMARY
