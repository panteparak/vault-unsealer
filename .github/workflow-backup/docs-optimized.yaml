# Optimized Documentation Pipeline - Smart path-based triggering
# Builds and deploys documentation only when relevant files change
# Estimated Duration: 5-8 minutes

name: 📚 Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - '*.md'
      - 'pkg/**/*.go'
      - 'helm/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs-optimized.yaml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - '*.md'
      - 'mkdocs.yml'
  workflow_dispatch:

env:
  GO_VERSION: "1.24"

# Only run one docs build at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Required for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Detect what changed to optimize build process
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      docs-changed: ${{ steps.changes.outputs.docs }}
      code-changed: ${{ steps.changes.outputs.code }}
      helm-changed: ${{ steps.changes.outputs.helm }}
      force-rebuild: ${{ steps.changes.outputs.force-rebuild }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        id: changes
        run: |
          # For workflow_dispatch, rebuild everything
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "docs=true" >> $GITHUB_OUTPUT
            echo "code=true" >> $GITHUB_OUTPUT
            echo "helm=true" >> $GITHUB_OUTPUT
            echo "force-rebuild=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Compare against base branch for PRs, or previous commit for pushes
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
          else
            BASE="HEAD~1"
          fi

          # Check what types of files changed
          DOCS_CHANGED="false"
          CODE_CHANGED="false"
          HELM_CHANGED="false"

          # Check for docs changes
          if git diff --name-only $BASE HEAD | grep -E '^(docs/|.*\.md$|mkdocs\.yml)'; then
            DOCS_CHANGED="true"
          fi

          # Check for code changes that affect API docs
          if git diff --name-only $BASE HEAD | grep -E '^pkg/.*\.go$'; then
            CODE_CHANGED="true"
          fi

          # Check for Helm changes
          if git diff --name-only $BASE HEAD | grep -E '^helm/'; then
            HELM_CHANGED="true"
          fi

          echo "docs=$DOCS_CHANGED" >> $GITHUB_OUTPUT
          echo "code=$CODE_CHANGED" >> $GITHUB_OUTPUT
          echo "helm=$HELM_CHANGED" >> $GITHUB_OUTPUT
          echo "force-rebuild=false" >> $GITHUB_OUTPUT

          echo "📋 Change Detection Results:"
          echo "  Docs: $DOCS_CHANGED"
          echo "  Code: $CODE_CHANGED"
          echo "  Helm: $HELM_CHANGED"

  # Build documentation with smart caching
  build-docs:
    name: 🏗️ Build Documentation
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.docs-changed == 'true' || needs.detect-changes.outputs.code-changed == 'true' || needs.detect-changes.outputs.helm-changed == 'true'
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        if: needs.detect-changes.outputs.code-changed == 'true'
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Install Node.js dependencies (for Mermaid)
        run: |
          npm install -g @mermaid-js/mermaid-cli

      - name: Generate API documentation
        if: needs.detect-changes.outputs.code-changed == 'true'
        run: |
          echo "🔧 Generating API documentation from Go code..."

          # Generate godoc-style documentation
          go install golang.org/x/tools/cmd/godoc@latest

          # Create API docs directory
          mkdir -p docs/api

          # Generate package documentation
          for pkg in $(go list ./pkg/...); do
            pkg_name=$(basename $pkg)
            echo "Generating docs for $pkg..."
            go doc -all $pkg > docs/api/${pkg_name}.md
          done

          echo "✅ API documentation generated"

      - name: Generate CRD documentation
        if: needs.detect-changes.outputs.helm-changed == 'true'
        run: |
          echo "📋 Generating CRD documentation..."

          # Install crd-ref-docs if not present
          go install github.com/elastic/crd-ref-docs@latest

          # Generate CRD reference docs
          crd-ref-docs \
            --source-path=./pkg/api \
            --config=docs/crd-docs-config.yaml \
            --renderer=markdown \
            --output-path=docs/reference/crds.md

          echo "✅ CRD documentation generated"

      - name: Build MkDocs site
        run: |
          echo "🏗️ Building MkDocs site..."

          # Verify mkdocs.yml exists
          if [[ ! -f mkdocs.yml ]]; then
            echo "⚠️ mkdocs.yml not found, creating basic configuration..."
            cat > mkdocs.yml << 'EOF'
          site_name: Vault Auto-Unseal Operator
          site_description: Kubernetes operator for automatically unsealing Vault instances

          theme:
            name: material
            palette:
              - scheme: default
                primary: blue
                accent: blue
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - navigation.top
              - search.highlight
              - content.code.copy

          plugins:
            - search
            - mermaid2

          markdown_extensions:
            - pymdownx.highlight:
                anchor_linenums: true
            - pymdownx.inlinehilite
            - pymdownx.snippets
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:mermaid2.fence_mermaid
            - admonition
            - pymdownx.details

          nav:
            - Home: index.md
            - User Guide:
              - Installation: user-guide/installation.md
              - Configuration: user-guide/configuration.md
              - Examples: user-guide/examples.md
            - API Reference:
              - CRDs: reference/crds.md
            - Development:
              - Contributing: development/contributing.md
              - Testing: development/testing.md
          EOF
          fi

          # Build the site
          mkdocs build --strict

          echo "✅ MkDocs site built successfully"

      - name: Optimize built site
        run: |
          echo "⚡ Optimizing built site..."

          # Compress images if any exist
          find site/ -name "*.png" -exec optipng -quiet {} \; 2>/dev/null || true
          find site/ -name "*.jpg" -exec jpegoptim --quiet {} \; 2>/dev/null || true

          # Generate sitemap if not present
          if [[ ! -f site/sitemap.xml ]]; then
            echo "🗺️ Generating sitemap..."
            find site/ -name "*.html" | sed 's|site/||' | sort > sitemap.txt
          fi

          echo "✅ Site optimization completed"

      - name: Upload documentation artifact
        id: upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/
          name: github-pages-${{ github.run_number }}

      - name: Upload docs for review (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docs-preview-${{ github.event.number }}
          path: site/
          retention-days: 7

  # Deploy to GitHub Pages (main branch only)
  deploy-pages:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: ${{ needs.build-docs.outputs.artifact-name }}

      - name: Update deployment summary
        run: |
          echo "## 📚 Documentation Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Successfully deployed to GitHub Pages**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Site URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Deployed**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "💾 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Comment on PR with preview link
  pr-comment:
    name: 💬 PR Preview Comment
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR with preview info
        uses: actions/github-script@v7
        with:
          script: |
            const message = `
            ## 📚 Documentation Preview

            Your documentation changes have been built and are ready for review!

            ### 📋 What Changed
            - **Docs**: ${{ needs.detect-changes.outputs.docs-changed == 'true' && '✅ Updated' || '⏭️ No changes' }}
            - **API Docs**: ${{ needs.detect-changes.outputs.code-changed == 'true' && '✅ Regenerated' || '⏭️ No changes' }}
            - **CRD Docs**: ${{ needs.detect-changes.outputs.helm-changed == 'true' && '✅ Regenerated' || '⏭️ No changes' }}

            ### 🔍 Review Checklist
            - [ ] Check documentation builds without errors
            - [ ] Verify all links work correctly
            - [ ] Ensure code examples are accurate
            - [ ] Review API documentation updates

            *The documentation will be automatically deployed when this PR is merged to main.*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  # Cleanup old preview artifacts
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [build-docs, deploy-pages]
    if: always()
    steps:
      - name: Delete old preview artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Keep only the last 5 preview artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const previewArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith('docs-preview-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5); // Keep newest 5, delete the rest

            for (const artifact of previewArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted old preview artifact: ${artifact.name}`);
            }
