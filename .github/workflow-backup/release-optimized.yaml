# Optimized Release Pipeline - Streamlined release automation
# Consolidates: version determination, multi-platform builds, helm releases
# Estimated Duration: 15-20 minutes

name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: "1.24"

# Only run one release at a time
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  # Version determination and validation
  determine-version:
    name: 🏷️ Version & Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.ref_name }}"
            # Determine if it's a prerelease (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi

          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          echo "✅ Release version: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## Changes since $PREVIOUS_TAG" > changelog.md
            echo "" >> changelog.md

            # Get commits since previous tag
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "- Initial release of vault-unsealer" >> changelog.md
          fi

          # Output for use in other steps
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  # Multi-platform Docker image build and push
  build-images:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: [determine-version]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.determine-version.outputs.tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.determine-version.outputs.tag }}
            type=semver,pattern={{major}},value=${{ needs.determine-version.outputs.tag }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            BUILD_VERSION=${{ needs.determine-version.outputs.version }}
            BUILD_DATE=${{ github.run_number }}

  # Helm chart release
  release-helm:
    name: 📦 Helm Chart Release
    runs-on: ubuntu-latest
    needs: [determine-version, build-images]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Update chart version and appVersion
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"

          # Update Chart.yaml
          sed -i "s/^version: .*/version: $VERSION/" ./helm/vault-unsealer/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: $VERSION/" ./helm/vault-unsealer/Chart.yaml

          # Update values.yaml with new image
          sed -i "s|repository: .*|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|" ./helm/vault-unsealer/values.yaml
          sed -i "s/tag: .*/tag: ${{ needs.determine-version.outputs.version }}/" ./helm/vault-unsealer/values.yaml

      - name: Package Helm chart
        run: |
          helm dependency update ./helm/vault-unsealer
          helm package ./helm/vault-unsealer \
            --destination=./charts/ \
            --version=${{ needs.determine-version.outputs.version }}

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ needs.determine-version.outputs.version }}
          path: charts/
          retention-days: 90

  # GitHub release creation
  create-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-version, build-images, release-helm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Helm chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-${{ needs.determine-version.outputs.version }}
          path: ./release-artifacts/

      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          # 🚀 Release ${{ needs.determine-version.outputs.tag }}

          ## What's New

          ${{ needs.determine-version.outputs.changelog }}

          ## 📦 Installation

          ### Helm Chart
          ```bash
          helm repo add vault-unsealer https://panteparak.github.io/vault-unsealer
          helm install my-operator vault-unsealer/vault-unsealer --version ${{ needs.determine-version.outputs.version }}
          ```

          ### Docker Image
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}
          ```

          ## 🔍 Verification

          **Image Digest**: `${{ needs.build-images.outputs.image-digest }}`

          **Supported Platforms**:
          - linux/amd64
          - linux/arm64

          ## 📋 Compatibility

          - **Kubernetes**: 1.28+
          - **Helm**: 3.8+
          - **Vault**: 1.12.0+
          - **Go**: ${{ env.GO_VERSION }}

          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine-version.outputs.tag }}
          name: Release ${{ needs.determine-version.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.determine-version.outputs.is_prerelease == 'true' }}
          files: |
            ./release-artifacts/*.tgz
          token: ${{ secrets.GITHUB_TOKEN }}

  # Release verification and notification
  post-release:
    name: ✅ Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [determine-version, create-release]
    if: always()
    steps:
      - name: Verify release
        run: |
          # Verify Docker image exists
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}

          # Verify image can run
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }} --version

          echo "✅ Release ${{ needs.determine-version.outputs.tag }} verified successfully"

      - name: Update release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.determine-version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type**: ${{ needs.determine-version.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Update documentation" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Announce release" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor deployment metrics" >> $GITHUB_STEP_SUMMARY

      # This could be extended to send notifications to Slack, Discord, etc.
      - name: Notify success
        if: success()
        run: |
          echo "🎉 Release ${{ needs.determine-version.outputs.tag }} completed successfully!"
          echo "📦 Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}"
          echo "🔗 Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.determine-version.outputs.tag }}"
